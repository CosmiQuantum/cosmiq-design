#!python

import cubit

def composite_curve_sections(surface_id, num_sections):
    curve_ids = list(cubit.parse_cubit_list("curve", f"in surface {surface_id}"))
    n = len(curve_ids)
    section_size = n // num_sections
    remainder = n % num_sections

    sections = []
    start = 0
    for i in range(num_sections):
        extra = 1 if i < remainder else 0
        end = start + section_size + extra
        section = curve_ids[start:end]
        sections.append(section)
        start = end

    for section in sections:
        vol_ids = ' '.join(map(str, section))
        cmd = f"composite create curve {vol_ids}"
        print(f"Running: {cmd}")
        cubit.cmd(cmd)
        
surface_id = 1 # surface id of surface whose curves you want to combine
num_sections = 1 # number of total sections you to reduce the curves to

composite_curve_sections(surface_id=surface_id, num_sections=num_sections)


